pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub')
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout the Git repository
                checkout([$class: 'GitSCM', branches: [[name: 'main']], userRemoteConfigs: [[url: 'https://github.com/pavankolasani719/Python']]])
            }
        }

        stage('Read Files') {
            steps {
                script {
                    def workspace = pwd()
                    def calculatorFolder = "${workspace}/calculator"
                    def calculatorFile = "${calculatorFolder}/calculator.py"
                    def dockerfile = "${workspace}/Dockerfile"

                    if (fileExists(calculatorFolder)) {
                        def calculatorCode = readFile(file: calculatorFile).trim()
                        echo "Contents of calculator.py:"
                        echo calculatorCode
                    } else {
                        echo "The 'calculator' folder does not exist in the repository."
                    }

                    if (fileExists(dockerfile)) {
                        def dockerfileContent = readFile(file: dockerfile).trim()
                        echo "\nContents of Dockerfile:"
                        echo dockerfileContent
                    } else {
                        echo "The 'Dockerfile' does not exist in the repository."
                    }
                }
            }
        }

        stage('Login to DockerHub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKERHUB_CREDENTIALS_USR', passwordVariable: 'DOCKERHUB_CREDENTIALS_PSW')]) {
                    bat(script: 'echo %DOCKERHUB_CREDENTIALS_PSW% | docker login -u %DOCKERHUB_CREDENTIALS_USR% --password-stdin')
                }
            }
        }

        stage('Build and Push Image') {
            steps {
                bat 'docker build -t your-docker-image-name .'
                bat 'docker push your-docker-image-name'
            }
        }
    }

    post {
        always {
            bat 'docker logout'
        }
    }
}
