pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub')
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout the Git repository
                checkout([$class: 'GitSCM', branches: [[name: 'main']], userRemoteConfigs: [[url: 'https://github.com/digitaledify/lms-public']]])
            }
        }

        stage('Read Files') {
            steps {
                script {
                    def workspace = pwd()
                    def webapp = "${workspace}/webapp"
                    //def calculatorFile = "${calculatorFolder}/calculator.py"
                    def package-lock.json = "$webapp/package-lock.json"
                    //def dockerfile = "${workspace}/Dockerfile"

                    if (fileExists(webapp)) {
                        def webapp = readFile(file: webapp).trim()
                        echo "package-lock.json:"
                        echo package-lock.json
                    } else {
                        echo "The 'webapp' folder does not exist in the repository."
                    }

                    //if (fileExists(dockerfile)) {
                       // def dockerfileContent = readFile(file: dockerfile).trim()
                        //echo "\nContents of Dockerfile:"
                        //echo dockerfileContent
                    //} else {
                        //echo "The 'Dockerfile' does not exist in the repository."
                    //}
                }
            }
        }

        stage('SonarQube Analysis') {
    steps {
        script {
            def scannerHome = tool 'SonarScanner';
            def scannerBin = "${scannerHome}\\bin\\sonar-scanner.bat" // Use .bat extension for Windows
            def scannerArgs = """
                -Dsonar.projectKey=myProjectKey
                -Dsonar.sources=.
                -Dsonar.host.url=http://your-sonarqube-server:9000
                -Dsonar.login=your-sonarqube-token
            """.stripIndent() // Customize with your SonarQube details
            
bat(script: "C:\\ProgramData\\Jenkins\\.jenkins\\tools\\hudson.plugins.sonar.SonarRunnerInstallation\\SonarScanner\\bin\\sonar-scanner.bat ${scannerArgs}", returnStatus: true)        }
    }
}

        }
    }

    post {
        always {
            // Clean up workspace after the job is done
            cleanWs()
        }
    }
